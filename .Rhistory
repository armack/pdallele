devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
warnings()
#' @param ... <data-masking> columns of labels to be ranked
#' @param count column of values (typically counts) to rank
#' @param n number of rows to keep per group (all other values will be collapsed
#' into an `other` row, meaning n+1 total rows will appear in out unless
#' `other_pos` is set to "drop"
#' @param desc should the n highest values of `count` be kept?
#' @param other character label for the "other" group
#' @param other_pos where should "other" sort?
#' @param relevel should factors in `...` be releveld in alphanumeric order?
#'
new_top_n_across_groups <- function(.data, ..., count = alleles, n = 10,
desc = TRUE, other = "Other",
relevel = "name", other_pos = "last"){
dots <- rlang::enquos(...)
if(...length() < 1){
stop("Must provide column names in `...`")
}else if(!all(unlist(map(dots, rlang::as_name)) %in% names(.data))){
stop("Please ensure values given in `...` are valid column names.")
}
if(!(relevel %in% c("name","count","none"))){
rlang::inform("Invalid `relevel` provided. No releveling performed.")
}
if(!(other_pos %in% c("drop","first","last","none"))){
rlang::inform("Invalid `other_pos` provided. No releveling performed.")
}
.complete <- .data %>%
{if(desc) arrange(., desc({{count}})) else arrange(., {{count}})} %>%
mutate(top = if_else(row_number() <= n, paste(!!!dots), NA_character_)) %>%
mutate(group_total = if_else(row_number() == 1, sum({{count}}), NA_integer_)) %>%
with_groups(NULL, mutate, keep = paste(!!!dots) %in% top) %>%
mutate(across(c(...), ~fct_expand(., cur_column(), other))) %>%
mutate(across(c(...), ~if_else(keep, ., as_factor(other)))) %>%
group_by(..., group_total, .add = TRUE) %>%
summarize({{count}} := sum({{count}}), .groups = "drop") %>%
{if(desc) arrange(., desc({{count}})) else arrange(., {{count}})} %>%
{if (identical(relevel,"name")) relevel_numeric(., ...)
else if(identical(relevel,"count")) mutate(., across(c(...), ~fct_reorder(., {{count}})))
else .} %>%
{if (identical(other_pos, "last")) mutate(., across(c(...), ~ suppressWarnings(fct_relevel(., other, after = Inf))))
else if(identical(other_pos, "first")) mutate(., across(c(...), ~ suppressWarnings(fct_relevel(., other, after = 0L))))
else if(identical(other_pos, "drop")) filter(., !grepl(other, !!!dots))
else .} %>%
arrange(...)
return(.complete)
}
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm new_top_n_across_groups
remove(new_top_n_across_groups)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
use_git()
use_git()
devtools::document()
warnings()
warnings()
devtools::document()
warning()
warnings()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
?unlist
?tibble
?tibble::tibble()
?paste0
list_rbind
?list_rbind
?setdiff
?basename
?nrow
?where
dplyr::if_e?sub
?sub
?count
?across
?identical
?cur_column
slice_he?quantile
?quantile
nrow
?sym
rlang::sym()
?dir.create
devtools::document()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
?cumsum
?format
ggplot2::+replace
ggplot2::replace
ggplot2::%+replace%
?ggplot2::%+replace%
?ggplot2::"%+replace%"
devtools::document()
dense_rank
dplyr::desc
?unite
?recode
devtools::check()
devtools::check()
c(
"dplyr",
"forcats",
"ggplot2",
"rlang",
"xml2",
"RCurl" "bigrquery" "countrycode" "dbplyr" "ggrepel" "ggtext"
c(
"dplyr",
"forcats",
"ggplot2",
"rlang",
"xml2",
"RCurl",
"bigrquery",
"countrycode",
"dbplyr",
"ggrepel",
"ggtext"
"ggthemes",
c(
"dplyr",
"forcats",
"ggplot2",
"rlang",
"xml2",
"RCurl",
"bigrquery",
"countrycode",
"dbplyr",
"ggrepel",
"ggtext",
"ggthemes",
"lubridate",
"maps",
"progress",
"purrr",
"readr",
"rentrez"
"stringi",
c(
"dplyr",
"forcats",
"ggplot2",
"rlang",
"xml2",
"RCurl",
"bigrquery",
"countrycode",
"dbplyr",
"ggrepel",
"ggtext",
"ggthemes",
"lubridate",
"maps",
"progress",
"purrr",
"readr",
"rentrez",
"stringi",
"stringr",
"tibble",
"tidyr",
"tidyselect",
"viridis") %>%
tibble::tibble()
c(
"dplyr",
"forcats",
"ggplot2",
"rlang",
"xml2",
"RCurl",
"bigrquery",
"countrycode",
"dbplyr",
"ggrepel",
"ggtext",
"ggthemes",
"lubridate",
"maps",
"progress",
"purrr",
"readr",
"rentrez",
"stringi",
"stringr",
"tibble",
"tidyr",
"tidyselect",
"viridis") %>%
tibble::tibble() %>%
arrange()
c(
"dplyr",
"forcats",
"ggplot2",
"rlang",
"xml2",
"RCurl",
"bigrquery",
"countrycode",
"dbplyr",
"ggrepel",
"ggtext",
"ggthemes",
"lubridate",
"maps",
"progress",
"purrr",
"readr",
"rentrez",
"stringi",
"stringr",
"tibble",
"tidyr",
"tidyselect",
"viridis") %>%
tibble::tibble() %>%
arrange(desc(.))
c(
"dplyr",
"forcats",
"ggplot2",
"rlang",
"xml2",
"RCurl",
"bigrquery",
"countrycode",
"dbplyr",
"ggrepel",
"ggtext",
"ggthemes",
"lubridate",
"maps",
"progress",
"purrr",
"readr",
"rentrez",
"stringi",
"stringr",
"tibble",
"tidyr",
"tidyselect",
"viridis") %>%
tibble::tibble() %>%
arrange((.))
c(
"dplyr",
"forcats",
"ggplot2",
"rlang",
"xml2",
"RCurl",
"bigrquery",
"countrycode",
"dbplyr",
"ggrepel",
"ggtext",
"ggthemes",
"lubridate",
"maps",
"progress",
"purrr",
"readr",
"rentrez",
"stringi",
"stringr",
"tibble",
"tidyr",
"tidyselect",
"viridis") %>%
tibble::tibble() %>%
arrange((.)) %>%
write.csv()
c(
"dplyr",
"forcats",
"ggplot2",
"rlang",
"xml2",
"RCurl",
"bigrquery",
"countrycode",
"dbplyr",
"ggrepel",
"ggtext",
"ggthemes",
"lubridate",
"maps",
"progress",
"purrr",
"readr",
"rentrez",
"stringi",
"stringr",
"tibble",
"tidyr",
"tidyselect",
"viridis") %>%
tibble::tibble() %>%
arrange((.)) %>%
write.csv(row.names = F)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
